############################## 配置属性说明 ################################
#Spring Boot能从多种属性源获得属性,包括如下几处。
#(1) 命令行参数
#       eg:java -jar readinglist-0.0.1-SNAPSHOT.jar --spring.main.show-banner=false
#(2) java:comp/env 里的JNDI属性
#(3) JVM系统属性
#(4) 操作系统环境变量
#        eg:$ export spring_main_show_banner=false
#(5) 随机生成的带 random.* 前缀的属性(在设置其他属性时,可以引用它们,比如 ${random.long} )
#(6) 应用程序以外的application.properties或者appliaction.yml文件
#(7) 打包在应用程序内的application.properties或者appliaction.yml文件
#(8) 通过 @PropertySource 标注的属性源
#(9) 默认属性
#这个列表按照优先级排序,也就是说,任何在高优先级属性源里设置的属性都会覆盖低优先
#级的相同属性。例如,命令行参数会覆盖其他属性源里的属性
#application.properties和application.yml文件能放在以下四个位置。
#(1) 外置,在相对于应用程序运行目录的/config子目录里。
#(2) 外置,在应用程序运行的目录里。
#(3) 内置,在config包内。
#(4) 内置,在Classpath根目录。
#同样,这个列表按照优先级排序
############################### 配置属性使用 #######################################

#用于配置应用程序和Spring Boot的属性
#web端口
server.port=8000

#JPA配置
spring.jpa.show-sql=true

#引入其他配置文件
#spring.profiles.active=development,database

#激活production配置使SecurityConfig生效
spring.profiles.active=database,production

#除了服务器的端口,你还可能希望服务器提供HTTPS服务。为此,第一步就是用JDK的
#keytool 工具来创建一个密钥存储(keystore)（注：一定要记住密码）
#$ keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA
server.ssl.key-store=classpath:mykeys.jks
#server.ssl.key-store=file:///home/lihn/WorkSpace/learn_space/spring_boot/src/main/resources/mykeys.jks
server.ssl.key-store-password=123456
server.ssl.key-password=123456

#amazon配置文件属性映射到java对象的属性
amazon.associate_id=habuma-20



